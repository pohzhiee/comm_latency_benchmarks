// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bench1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bench1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bench1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bench1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bench1_2eproto;
namespace pb {
namespace Bench1 {
class Bench1;
class Bench1DefaultTypeInternal;
extern Bench1DefaultTypeInternal _Bench1_default_instance_;
}  // namespace Bench1
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Bench1::Bench1* Arena::CreateMaybeMessage<::pb::Bench1::Bench1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace Bench1 {

// ===================================================================

class Bench1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Bench1.Bench1) */ {
 public:
  Bench1();
  virtual ~Bench1();

  Bench1(const Bench1& from);
  Bench1(Bench1&& from) noexcept
    : Bench1() {
    *this = ::std::move(from);
  }

  inline Bench1& operator=(const Bench1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bench1& operator=(Bench1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bench1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bench1* internal_default_instance() {
    return reinterpret_cast<const Bench1*>(
               &_Bench1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bench1& a, Bench1& b) {
    a.Swap(&b);
  }
  inline void Swap(Bench1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bench1* New() const final {
    return CreateMaybeMessage<Bench1>(nullptr);
  }

  Bench1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bench1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bench1& from);
  void MergeFrom(const Bench1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bench1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Bench1.Bench1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bench1_2eproto);
    return ::descriptor_table_bench1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kTimeFieldNumber = 1,
    kNrowsFieldNumber = 2,
    kNcolsFieldNumber = 3,
  };
  // repeated double data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // uint64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 nrows = 2;
  void clear_nrows();
  ::PROTOBUF_NAMESPACE_ID::uint64 nrows() const;
  void set_nrows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nrows() const;
  void _internal_set_nrows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ncols = 3;
  void clear_ncols();
  ::PROTOBUF_NAMESPACE_ID::uint64 ncols() const;
  void set_ncols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ncols() const;
  void _internal_set_ncols(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Bench1.Bench1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nrows_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ncols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bench1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bench1

// uint64 time = 1;
inline void Bench1::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bench1::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bench1::time() const {
  // @@protoc_insertion_point(field_get:pb.Bench1.Bench1.time)
  return _internal_time();
}
inline void Bench1::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void Bench1::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.Bench1.Bench1.time)
}

// uint64 nrows = 2;
inline void Bench1::clear_nrows() {
  nrows_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bench1::_internal_nrows() const {
  return nrows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bench1::nrows() const {
  // @@protoc_insertion_point(field_get:pb.Bench1.Bench1.nrows)
  return _internal_nrows();
}
inline void Bench1::_internal_set_nrows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nrows_ = value;
}
inline void Bench1::set_nrows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nrows(value);
  // @@protoc_insertion_point(field_set:pb.Bench1.Bench1.nrows)
}

// uint64 ncols = 3;
inline void Bench1::clear_ncols() {
  ncols_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bench1::_internal_ncols() const {
  return ncols_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bench1::ncols() const {
  // @@protoc_insertion_point(field_get:pb.Bench1.Bench1.ncols)
  return _internal_ncols();
}
inline void Bench1::_internal_set_ncols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ncols_ = value;
}
inline void Bench1::set_ncols(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ncols(value);
  // @@protoc_insertion_point(field_set:pb.Bench1.Bench1.ncols)
}

// repeated double data = 4;
inline int Bench1::_internal_data_size() const {
  return data_.size();
}
inline int Bench1::data_size() const {
  return _internal_data_size();
}
inline void Bench1::clear_data() {
  data_.Clear();
}
inline double Bench1::_internal_data(int index) const {
  return data_.Get(index);
}
inline double Bench1::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.Bench1.Bench1.data)
  return _internal_data(index);
}
inline void Bench1::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Bench1.Bench1.data)
}
inline void Bench1::_internal_add_data(double value) {
  data_.Add(value);
}
inline void Bench1::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:pb.Bench1.Bench1.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bench1::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bench1::data() const {
  // @@protoc_insertion_point(field_list:pb.Bench1.Bench1.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bench1::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bench1::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.Bench1.Bench1.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Bench1
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bench1_2eproto
